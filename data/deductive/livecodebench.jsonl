{
  "question_id": 3172,
  "id": "sample_244",
  "function_name": "differenceOfSums",
  "code": "def differenceOfSums(n: int, m: int) -> int:\n    return sum(x for x in range(1, n + 1) if x % m) - sum(x for x in range(1, n + 1) if x % m == 0)",
  "input": "differenceOfSums(n = 5, m = 1)",
  "output": "-15",
  "numsteps": 642,
  "problem_id": [
    65,
    10,
    2
  ],
  "contest_id": "weekly-contest-366",
  "contest_date": "2023-10-08",
  "difficulty": "easy"
}
{
  "question_id": 3172,
  "id": "sample_245",
  "function_name": "differenceOfSums",
  "code": "def differenceOfSums(n: int, m: int) -> int:\n    return sum(i for i in range(1, n + 1) if i % m != 0) - sum(i for i in range(1, n + 1) if i % m == 0)",
  "input": "differenceOfSums(n = 5, m = 1)",
  "output": "-15",
  "numsteps": 652,
  "problem_id": [
    65,
    15,
    2
  ],
  "contest_id": "weekly-contest-366",
  "contest_date": "2023-10-08",
  "difficulty": "easy"
}
{
  "question_id": 3172,
  "id": "sample_246",
  "function_name": "differenceOfSums",
  "code": "def differenceOfSums(n: int, m: int) -> int:\n    return sum(i for i in range(1, n+1) if i % m != 0) - sum(i for i in range(1, n+1) if i % m == 0)",
  "input": "differenceOfSums(n = 5, m = 1)",
  "output": "-15",
  "numsteps": 652,
  "problem_id": [
    65,
    2,
    2
  ],
  "contest_id": "weekly-contest-366",
  "contest_date": "2023-10-08",
  "difficulty": "easy"
}
{
  "question_id": 3033,
  "id": "sample_247",
  "function_name": "minOperations",
  "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0: return -1\n    dp0, dp1 = 0, 0\n    for i in range(1, len(idx)):\n        dp0, dp1 = dp1, min(dp1, dp0 + (idx[i] - idx[i-1] - x))\n    return len(idx) // 2 * x + dp1",
  "input": "minOperations(s1 = '10110', s2 = '00011', x = 4)",
  "output": "-1",
  "numsteps": 587,
  "problem_id": [
    67,
    2,
    1
  ],
  "contest_id": "weekly-contest-366",
  "contest_date": "2023-10-08",
  "difficulty": "medium"
}
{
  "question_id": 3033,
  "id": "sample_248",
  "function_name": "minOperations",
  "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    \n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n    \n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        \n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n        \n    # print(mask, dp(tuple(mask)))\n    return dp(tuple(mask)) // 2",
  "input": "minOperations(s1 = '10110', s2 = '00011', x = 4)",
  "output": "-1",
  "numsteps": 505,
  "problem_id": [
    67,
    10,
    1
  ],
  "contest_id": "weekly-contest-366",
  "contest_date": "2023-10-08",
  "difficulty": "medium"
}
{
  "question_id": 3150,
  "id": "sample_249",
  "function_name": "shortestBeautifulSubstring",
  "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j+1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return \"\" if ans is None else ans",
  "input": "shortestBeautifulSubstring(s = '1011', k = 2)",
  "output": "'11'",
  "numsteps": 802,
  "problem_id": [
    69,
    14,
    1
  ],
  "contest_id": "weekly-contest-367",
  "contest_date": "2023-10-15",
  "difficulty": "medium"
}
{
  "question_id": 3150,
  "id": "sample_250",
  "function_name": "shortestBeautifulSubstring",
  "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''",
  "input": "shortestBeautifulSubstring(s = '1011', k = 2)",
  "output": "'11'",
  "numsteps": 837,
  "problem_id": [
    69,
    5,
    1
  ],
  "contest_id": "weekly-contest-367",
  "contest_date": "2023-10-15",
  "difficulty": "medium"
}
{
  "question_id": 3150,
  "id": "sample_251",
  "function_name": "shortestBeautifulSubstring",
  "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'z' * 101\n\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n\n    return \"\" if min_len == inf else ans",
  "input": "shortestBeautifulSubstring(s = '1011', k = 2)",
  "output": "'11'",
  "numsteps": 799,
  "problem_id": [
    69,
    2,
    1
  ],
  "contest_id": "weekly-contest-367",
  "contest_date": "2023-10-15",
  "difficulty": "medium"
}
{
  "question_id": 3150,
  "id": "sample_252",
  "function_name": "shortestBeautifulSubstring",
  "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = \"\"\n    n = len(s)\n    min_len = None\n    for ln in range(k, n+1):\n        for i in range(n-ln+1):\n            ss = s[i:i+ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty",
  "input": "shortestBeautifulSubstring(s = '1011', k = 2)",
  "output": "'11'",
  "numsteps": 682,
  "problem_id": [
    69,
    16,
    1
  ],
  "contest_id": "weekly-contest-367",
  "contest_date": "2023-10-15",
  "difficulty": "medium"
}
{
  "question_id": 3150,
  "id": "sample_253",
  "function_name": "shortestBeautifulSubstring",
  "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), \"\")\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i : j + 1]))\n    return res[1]",
  "input": "shortestBeautifulSubstring(s = '1011', k = 2)",
  "output": "'11'",
  "numsteps": 791,
  "problem_id": [
    69,
    8,
    1
  ],
  "contest_id": "weekly-contest-367",
  "contest_date": "2023-10-15",
  "difficulty": "medium"
}
{
  "question_id": 3150,
  "id": "sample_254",
  "function_name": "shortestBeautifulSubstring",
  "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i]=='1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n+1)])]\n    for i in range(k-1, len(ones)):\n        i1 = ones[i-k+1]\n        i2 = ones[i]\n        answer =  min(answer, [i2-i1, s[i1:i2+1]])\n    return answer[1]",
  "input": "shortestBeautifulSubstring(s = '000', k = 1)",
  "output": "''",
  "numsteps": 539,
  "problem_id": [
    69,
    3,
    2
  ],
  "contest_id": "weekly-contest-367",
  "contest_date": "2023-10-15",
  "difficulty": "medium"
}
{
  "question_id": 3176,
  "id": "sample_255",
  "function_name": "minimumSum",
  "code": "def minimumSum(nums: List[int]) -> int:\n    n = len(nums)\n    ans = math.inf\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if nums[i] < nums[j] and nums[k] < nums[j]:\n                    ans = min(ans,nums[i]+nums[j]+nums[k])\n    return ans if ans!=math.inf else -1",
  "input": "minimumSum(nums = [8, 6, 1, 5, 3])",
  "output": "9",
  "numsteps": 863,
  "problem_id": [
    71,
    6,
    0
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "easy"
}
{
  "question_id": 3176,
  "id": "sample_256",
  "function_name": "minimumSum",
  "code": "def minimumSum(nums: List[int]) -> int:\n    p = list(accumulate(nums, min))\n    s = list(accumulate(nums[::-1], min))[::-1]\n    m = inf\n    for i in range(1, len(nums)-1):\n        if p[i-1] < nums[i] and s[i+1] < nums[i]:\n            m = min(m, p[i-1] + nums[i] + s[i+1])\n    return -1 if m == inf else m",
  "input": "minimumSum(nums = [8, 6, 1, 5, 3])",
  "output": "9",
  "numsteps": 620,
  "problem_id": [
    71,
    5,
    0
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "easy"
}
{
  "question_id": 3176,
  "id": "sample_257",
  "function_name": "minimumSum",
  "code": "def minimumSum(nums: List[int]) -> int:\n    left, right, ans = [inf], [inf], inf\n    for num in nums:\n        left.append(min(left[-1], num))\n    for num in nums[::-1]:\n        right.append(min(right[-1], num))\n    right.reverse()\n    for i, num in enumerate(nums):\n        if left[i] < num and right[i + 1] < num:\n            ans = min(ans, num + left[i] + right[i + 1])\n    return ans if ans < inf else -1",
  "input": "minimumSum(nums = [6, 5, 4, 3, 4, 5])",
  "output": "-1",
  "numsteps": 810,
  "problem_id": [
    71,
    13,
    2
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "easy"
}
{
  "question_id": 3176,
  "id": "sample_258",
  "function_name": "minimumSum",
  "code": "def minimumSum(nums: List[int]) -> int:\n    n = len(nums)\n    ans = inf\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if nums[j] > max(nums[i], nums[k]):\n                    ans = min(ans, nums[i] + nums[j] + nums[k])\n    return ans if ans < inf else -1",
  "input": "minimumSum(nums = [8, 6, 1, 5, 3])",
  "output": "9",
  "numsteps": 903,
  "problem_id": [
    71,
    1,
    0
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "easy"
}
{
  "question_id": 3176,
  "id": "sample_259",
  "function_name": "minimumSum",
  "code": "def minimumSum(nums: List[int]) -> int:\n    \n    n = len(nums)\n    A = deque()\n    rmin = math.inf\n    for i in range(n-1,-1,-1):\n        A.appendleft(rmin)\n        rmin = min(rmin,nums[i])\n    lmin = nums[0]\n    ans = math.inf\n    for i in range(1,n-1):\n        if lmin < nums[i] > A[i]:\n            ans = min(ans, lmin + nums[i] + A[i])\n        lmin = min(lmin, nums[i])\n    return ans if ans < math.inf else -1",
  "input": "minimumSum(nums = [6, 5, 4, 3, 4, 5])",
  "output": "-1",
  "numsteps": 752,
  "problem_id": [
    71,
    9,
    2
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "easy"
}
{
  "question_id": 3176,
  "id": "sample_260",
  "function_name": "minimumSum",
  "code": "def minimumSum(nums: list[int]) -> int:\n    n = len(nums)\n    ans = inf\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] < nums[j] and nums[j] > nums[k]:\n                    ans = min(ans, nums[i] + nums[j] + nums[k])\n    return ans if ans != inf else -1",
  "input": "minimumSum(nums = [8, 6, 1, 5, 3])",
  "output": "9",
  "numsteps": 848,
  "problem_id": [
    71,
    14,
    0
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "easy"
}
{
  "question_id": 3166,
  "id": "sample_261",
  "function_name": "minGroupsForValidAssignment",
  "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0: break\n            res += freq[x] * v\n        else: ans = min(ans, res)\n    return ans",
  "input": "minGroupsForValidAssignment(nums = [3, 2, 3, 2, 3])",
  "output": "2",
  "numsteps": 959,
  "problem_id": [
    72,
    1,
    0
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "medium"
}
{
  "question_id": 3166,
  "id": "sample_262",
  "function_name": "minGroupsForValidAssignment",
  "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in  d]\n    s.sort()\n\n    def f(x,n):\n        b = x//(n-1)\n        if x%(n-1)==0: return True\n        a = x - (n-1) * b\n        if a <= b:return True\n    for i in range(s[0]+1,1,-1):\n\n        if all(f(j,i) for j in s):\n\n            return  sum([j//i+(j%i !=0)  for j in s])",
  "input": "minGroupsForValidAssignment(nums = [10, 10, 10, 3, 1, 1])",
  "output": "4",
  "numsteps": 802,
  "problem_id": [
    72,
    6,
    1
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "medium"
}
{
  "question_id": 3166,
  "id": "sample_263",
  "function_name": "minGroupsForValidAssignment",
  "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _,v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0]+1,1,-1):\n        good = True\n        cnt = 0\n        for n in a:\n            q,r = divmod(n,sz)\n            if r!=0:\n                q+=1\n                r=sz-r\n            if r>q:\n                good=False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print(\"bad\")\n    return len(nums)",
  "input": "minGroupsForValidAssignment(nums = [10, 10, 10, 3, 1, 1])",
  "output": "4",
  "numsteps": 740,
  "problem_id": [
    72,
    4,
    1
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "medium"
}
{
  "question_id": 3166,
  "id": "sample_264",
  "function_name": "minGroupsForValidAssignment",
  "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n            \n    return m",
  "input": "minGroupsForValidAssignment(nums = [3, 2, 3, 2, 3])",
  "output": "2",
  "numsteps": 723,
  "problem_id": [
    72,
    5,
    0
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "medium"
}
{
  "question_id": 3166,
  "id": "sample_265",
  "function_name": "minGroupsForValidAssignment",
  "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    \n    x = A[0]\n    @lru_cache(None)\n    def dp(y,x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y==x or y == x+1:\n            return 1\n        return 1+min(dp(y-x,x),dp(y-x-1,x))\n    \n    while x:\n        ans = sum(dp(y,x) for y in A)\n        if ans < math.inf:\n            return ans\n        x=x-1",
  "input": "minGroupsForValidAssignment(nums = [3, 2, 3, 2, 3])",
  "output": "2",
  "numsteps": 881,
  "problem_id": [
    72,
    9,
    0
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "medium"
}
{
  "question_id": 3166,
  "id": "sample_266",
  "function_name": "minGroupsForValidAssignment",
  "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n        \n    counter, n = Counter(nums), len(nums)\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res",
  "input": "minGroupsForValidAssignment(nums = [3, 2, 3, 2, 3])",
  "output": "2",
  "numsteps": 668,
  "problem_id": [
    72,
    13,
    0
  ],
  "contest_id": "weekly-contest-368",
  "contest_date": "2023-10-22",
  "difficulty": "medium"
}
{
  "question_id": 3171,
  "id": "sample_267",
  "function_name": "minSum",
  "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    def f(nums):\n        return sum(max(1, x) for x in nums)\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = b, a\n        nums1, nums2 = nums2, nums1\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)",
  "input": "minSum(nums1 = [2, 0, 2, 0], nums2 = [1, 4])",
  "output": "-1",
  "numsteps": 673,
  "problem_id": [
    75,
    7,
    1
  ],
  "contest_id": "weekly-contest-369",
  "contest_date": "2023-10-29",
  "difficulty": "medium"
}
{
  "question_id": 3171,
  "id": "sample_268",
  "function_name": "minSum",
  "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        \n        return sum(nums1)\n                    \n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    \n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))",
  "input": "minSum(nums1 = [3, 2, 0, 1, 0], nums2 = [6, 5, 0])",
  "output": "12",
  "numsteps": 563,
  "problem_id": [
    75,
    1,
    0
  ],
  "contest_id": "weekly-contest-369",
  "contest_date": "2023-10-29",
  "difficulty": "medium"
}
{
  "question_id": 3171,
  "id": "sample_269",
  "function_name": "minSum",
  "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)",
  "input": "minSum(nums1 = [3, 2, 0, 1, 0], nums2 = [6, 5, 0])",
  "output": "12",
  "numsteps": 569,
  "problem_id": [
    75,
    5,
    0
  ],
  "contest_id": "weekly-contest-369",
  "contest_date": "2023-10-29",
  "difficulty": "medium"
}
{
  "question_id": 3171,
  "id": "sample_270",
  "function_name": "minSum",
  "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    \n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)",
  "input": "minSum(nums1 = [2, 0, 2, 0], nums2 = [1, 4])",
  "output": "-1",
  "numsteps": 637,
  "problem_id": [
    75,
    10,
    1
  ],
  "contest_id": "weekly-contest-369",
  "contest_date": "2023-10-29",
  "difficulty": "medium"
}
{
  "question_id": 3171,
  "id": "sample_271",
  "function_name": "minSum",
  "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    \n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    \n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    \n    \n    return max(s1+n1z,s2+n2z)",
  "input": "minSum(nums1 = [3, 2, 0, 1, 0], nums2 = [6, 5, 0])",
  "output": "12",
  "numsteps": 651,
  "problem_id": [
    75,
    15,
    0
  ],
  "contest_id": "weekly-contest-369",
  "contest_date": "2023-10-29",
  "difficulty": "medium"
}
{
  "question_id": 3171,
  "id": "sample_272",
  "function_name": "minSum",
  "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0) for x in nums1)\n    empty2 = sum((x == 0) for x in nums2)\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)",
  "input": "minSum(nums1 = [3, 2, 0, 1, 0], nums2 = [6, 5, 0])",
  "output": "12",
  "numsteps": 677,
  "problem_id": [
    75,
    13,
    0
  ],
  "contest_id": "weekly-contest-369",
  "contest_date": "2023-10-29",
  "difficulty": "medium"
}
{
  "question_id": 3188,
  "id": "sample_273",
  "function_name": "findChampion",
  "code": "def findChampion(grid: List[List[int]]) -> int:\n  n = len(grid)\n  for j in range(n):\n    if all(grid[i][j] == 0 for i in range(n)):\n      return j",
  "input": "findChampion(grid = [[0, 1], [0, 0]])",
  "output": "0",
  "numsteps": 599,
  "problem_id": [
    76,
    13,
    0
  ],
  "contest_id": "weekly-contest-370",
  "contest_date": "2023-11-05",
  "difficulty": "easy"
}
{
  "question_id": 3188,
  "id": "sample_274",
  "function_name": "findChampion",
  "code": "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n    for i in range(n):\n        curr = sum(grid[x][i] for x in range(n))\n        if curr == 0:\n            return i\n    return -1",
  "input": "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 0, 0]])",
  "output": "1",
  "numsteps": 685,
  "problem_id": [
    76,
    15,
    1
  ],
  "contest_id": "weekly-contest-370",
  "contest_date": "2023-11-05",
  "difficulty": "easy"
}
{
  "question_id": 3188,
  "id": "sample_275",
  "function_name": "findChampion",
  "code": "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n\n    def is_champ(i):\n        for j in range(n):\n            if j == i:\n                continue\n            if grid[i][j] == 0:\n                return False\n        return True\n\n    for i in range(n):\n        if is_champ(i):\n            return i\n    return -1",
  "input": "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 0, 0]])",
  "output": "1",
  "numsteps": 663,
  "problem_id": [
    76,
    7,
    1
  ],
  "contest_id": "weekly-contest-370",
  "contest_date": "2023-11-05",
  "difficulty": "easy"
}
{
  "question_id": 3188,
  "id": "sample_276",
  "function_name": "findChampion",
  "code": "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n    for i, row in enumerate(grid):\n        if sum(row[j] for j in range(n) if j != i) == n - 1:\n            return i\n    return -1",
  "input": "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 0, 0]])",
  "output": "1",
  "numsteps": 683,
  "problem_id": [
    76,
    14,
    1
  ],
  "contest_id": "weekly-contest-370",
  "contest_date": "2023-11-05",
  "difficulty": "easy"
}
{
  "question_id": 3188,
  "id": "sample_277",
  "function_name": "findChampion",
  "code": "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n    for i in range(n):\n        ct = 0\n        for j in range(n):\n            ct += grid[j][i]\n        if ct == 0:\n            return i",
  "input": "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 0, 0]])",
  "output": "1",
  "numsteps": 659,
  "problem_id": [
    76,
    1,
    1
  ],
  "contest_id": "weekly-contest-370",
  "contest_date": "2023-11-05",
  "difficulty": "easy"
}
{
  "question_id": 3188,
  "id": "sample_278",
  "function_name": "findChampion",
  "code": "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n    for i in range(n):\n        t = 0\n        for j in range(n):\n            t += grid[i][j]\n        if t == n - 1:\n            return i",
  "input": "findChampion(grid = [[0, 1], [0, 0]])",
  "output": "0",
  "numsteps": 589,
  "problem_id": [
    76,
    12,
    0
  ],
  "contest_id": "weekly-contest-370",
  "contest_date": "2023-11-05",
  "difficulty": "easy"
}
{
  "question_id": 3190,
  "id": "sample_279",
  "function_name": "minOperations",
  "code": "# output should be -1..\n\ndef min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]),\n        min_swaps(nums1, nums2, nums2[-1], nums1[-1]))",
  "input": "minOperations(nums1 = [1, 2, 7], nums2 = [4, 5, 3])",
  "output": "1",
  "numsteps": 711,
  "problem_id": [
    79,
    17,
    0
  ],
  "contest_id": "weekly-contest-371",
  "contest_date": "2023-11-12",
  "difficulty": "medium"
}
{
  "question_id": 3190,
  "id": "sample_280",
  "function_name": "minOperations",
  "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    @cache\n    def f(idx, a, b):\n        if idx == n-1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx+1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx+1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10**9 else -1",
  "input": "minOperations(nums1 = [1, 2, 7], nums2 = [4, 5, 3])",
  "output": "1",
  "numsteps": 949,
  "problem_id": [
    79,
    3,
    0
  ],
  "contest_id": "weekly-contest-371",
  "contest_date": "2023-11-12",
  "difficulty": "medium"
}
{
  "question_id": 3190,
  "id": "sample_281",
  "function_name": "minOperations",
  "code": "def minOperations(a: List[int], b: List[int]) -> int:\n    def f():\n        ret = 0\n        aa, bb = a[:], b[:]\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = b[i], a[i]\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    \n    ans = f()\n    a[-1], b[-1] = b[-1], a[-1]\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans",
  "input": "minOperations(a = [1, 2, 7], b = [4, 5, 3])",
  "output": "1",
  "numsteps": 911,
  "problem_id": [
    79,
    4,
    0
  ],
  "contest_id": "weekly-contest-371",
  "contest_date": "2023-11-12",
  "difficulty": "medium"
}
{
  "question_id": 3190,
  "id": "sample_282",
  "function_name": "minOperations",
  "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans",
  "input": "minOperations(nums1 = [1, 2, 7], nums2 = [4, 5, 3])",
  "output": "1",
  "numsteps": 711,
  "problem_id": [
    79,
    14,
    0
  ],
  "contest_id": "weekly-contest-371",
  "contest_date": "2023-11-12",
  "difficulty": "medium"
}
{
  "question_id": 3207,
  "id": "sample_283",
  "function_name": "findMinimumOperations",
  "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    l = min(len(s1), len(s2), len(s3))\n    for i in range(l, 0, -1):\n        if s1[:i] == s2[:i] and s2[:i] == s3[:i]:\n            return len(s1) - i + len(s2) - i + len(s3) - i\n        \n    return -1",
  "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')",
  "output": "-1",
  "numsteps": 559,
  "problem_id": [
    80,
    8,
    1
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "easy"
}
{
  "question_id": 3207,
  "id": "sample_284",
  "function_name": "findMinimumOperations",
  "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    ans = len(s1 + s2 + s3)\n    for i in range(len(s1), 0, -1):\n        if s1[:i] == s2[:i] == s3[:i]:\n            return ans - i * 3\n    return -1",
  "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')",
  "output": "-1",
  "numsteps": 569,
  "problem_id": [
    80,
    7,
    1
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "easy"
}
{
  "question_id": 3207,
  "id": "sample_285",
  "function_name": "findMinimumOperations",
  "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    n = len(s1)\n    m = len(s2)\n    k = len(s3)\n    ans = inf\n    for i in range(1, n+1):\n        if s1[:i] == s2[:i] == s3[:i]:\n            x1 = n-i\n            x2 = m-i\n            x3 = k-i\n            cur = x1+x2+x3\n            if cur < ans:\n                ans = cur\n    return ans if ans < inf else -1",
  "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')",
  "output": "-1",
  "numsteps": 581,
  "problem_id": [
    80,
    0,
    1
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "easy"
}
{
  "question_id": 3207,
  "id": "sample_286",
  "function_name": "findMinimumOperations",
  "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    if len(set([s1[0], s2[0], s3[0]])) != 1:\n        return -1\n    ans = 0\n    for i in range(min(len(s1), len(s2), len(s3))):\n        if s1[i]==s2[i]==s3[i]:\n            ans += 1\n        else:\n            break\n    return len(s1)+len(s2)+len(s3)-ans*3",
  "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')",
  "output": "-1",
  "numsteps": 508,
  "problem_id": [
    80,
    3,
    1
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "easy"
}
{
  "question_id": 3207,
  "id": "sample_287",
  "function_name": "findMinimumOperations",
  "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    if s1 == s2 == s3:\n        return 0\n    for i in range(min(len(s1), len(s2), len(s3))):\n        if s1[i] != s2[i] or s1[i] != s3[i]:\n            break\n    else:\n        i += 1\n    if i < 1:\n        return -1\n    else:\n        return len(s1) - i + (len(s2) - i) + (len(s3) - i)",
  "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')",
  "output": "-1",
  "numsteps": 533,
  "problem_id": [
    80,
    9,
    1
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "easy"
}
{
  "question_id": 3207,
  "id": "sample_288",
  "function_name": "findMinimumOperations",
  "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    for n in range(min(min(len(s1),len(s2)),len(s3)),0,-1):\n        if s1[:n] == s2[:n] and s1[:n] == s3[:n]:\n            return len(s1)+len(s2)+len(s3)-n*3\n    return -1",
  "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')",
  "output": "-1",
  "numsteps": 558,
  "problem_id": [
    80,
    12,
    1
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "easy"
}
{
  "question_id": 3195,
  "id": "sample_289",
  "function_name": "minimumSteps",
  "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    \n    return ret",
  "input": "minimumSteps(s = '0111')",
  "output": "0",
  "numsteps": 587,
  "problem_id": [
    81,
    8,
    2
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "medium"
}
{
  "question_id": 3195,
  "id": "sample_290",
  "function_name": "minimumSteps",
  "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i]=='0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i-a[i])\n    return ans",
  "input": "minimumSteps(s = '0111')",
  "output": "0",
  "numsteps": 570,
  "problem_id": [
    81,
    3,
    2
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "medium"
}
{
  "question_id": 3195,
  "id": "sample_291",
  "function_name": "minimumSteps",
  "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res",
  "input": "minimumSteps(s = '0111')",
  "output": "0",
  "numsteps": 552,
  "problem_id": [
    81,
    11,
    2
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "medium"
}
{
  "question_id": 3195,
  "id": "sample_292",
  "function_name": "minimumSteps",
  "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans",
  "input": "minimumSteps(s = '100')",
  "output": "2",
  "numsteps": 537,
  "problem_id": [
    81,
    7,
    1
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "medium"
}
{
  "question_id": 3195,
  "id": "sample_293",
  "function_name": "minimumSteps",
  "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    \n    return sum(idx) - m * (m - 1) // 2",
  "input": "minimumSteps(s = '101')",
  "output": "1",
  "numsteps": 553,
  "problem_id": [
    81,
    10,
    0
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "medium"
}
{
  "question_id": 3195,
  "id": "sample_294",
  "function_name": "minimumSteps",
  "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1': b += 1\n        else: re += b;\n    return re",
  "input": "minimumSteps(s = '101')",
  "output": "1",
  "numsteps": 536,
  "problem_id": [
    81,
    16,
    0
  ],
  "contest_id": "weekly-contest-372",
  "contest_date": "2023-11-18",
  "difficulty": "medium"
}
{
  "question_id": 3210,
  "id": "sample_295",
  "function_name": "beautifulSubstrings",
  "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = 0, 0\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans",
  "input": "beautifulSubstrings(s = 'abba', k = 1)",
  "output": "3",
  "numsteps": 912,
  "problem_id": [
    83,
    5,
    1
  ],
  "contest_id": "weekly-contest-373",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3210,
  "id": "sample_296",
  "function_name": "beautifulSubstrings",
  "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans",
  "input": "beautifulSubstrings(s = 'bcdf', k = 1)",
  "output": "0",
  "numsteps": 825,
  "problem_id": [
    83,
    4,
    2
  ],
  "contest_id": "weekly-contest-373",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3210,
  "id": "sample_297",
  "function_name": "beautifulSubstrings",
  "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = \"aeiou\"\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = 0, 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and (numVowels * numCons) % k == 0:\n                res += 1\n    return res",
  "input": "beautifulSubstrings(s = 'baeyh', k = 2)",
  "output": "2",
  "numsteps": 934,
  "problem_id": [
    83,
    10,
    0
  ],
  "contest_id": "weekly-contest-373",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3210,
  "id": "sample_298",
  "function_name": "beautifulSubstrings",
  "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    \n    vowels = set('aeiou')\n    \n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n                \n            output += (diff == 0) and (count ** 2 % k == 0)\n            \n    return output",
  "input": "beautifulSubstrings(s = 'bcdf', k = 1)",
  "output": "0",
  "numsteps": 815,
  "problem_id": [
    83,
    15,
    2
  ],
  "contest_id": "weekly-contest-373",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3210,
  "id": "sample_299",
  "function_name": "beautifulSubstrings",
  "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa=[]\n    for c in s:\n        if c in \"aiueo\":\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i=defaultdict(list)\n    a2i[0].append(0)\n    ans=s=0\n    for i,a in enumerate(aa):\n        s+=a\n        for j in a2i[s]:\n            if (((i+1-j)//2)**2)%k==0:\n                ans+=1\n        a2i[s].append(i+1)\n    return ans",
  "input": "beautifulSubstrings(s = 'bcdf', k = 1)",
  "output": "0",
  "numsteps": 723,
  "problem_id": [
    83,
    14,
    2
  ],
  "contest_id": "weekly-contest-373",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3210,
  "id": "sample_300",
  "function_name": "beautifulSubstrings",
  "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k+1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod(x ** ((v + 1) // 2) for x, v in p.items())\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[(x, i%k)] += 1\n    return sum(v * (v-1) // 2 for v in m.values())",
  "input": "beautifulSubstrings(s = 'abba', k = 1)",
  "output": "3",
  "numsteps": 759,
  "problem_id": [
    83,
    6,
    1
  ],
  "contest_id": "weekly-contest-373",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3219,
  "id": "sample_301",
  "function_name": "lexicographicallySmallestArray",
  "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    \n    order = sorted(range(n), key = lambda x: nums[x])\n    \n    out = [-1] * n\n    \n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l: i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out",
  "input": "lexicographicallySmallestArray(nums = [1, 5, 3, 9, 8], limit = 2)",
  "output": "[1, 3, 5, 8, 9]",
  "numsteps": 843,
  "problem_id": [
    84,
    0,
    0
  ],
  "contest_id": "weekly-contest-373",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3164,
  "id": "sample_435",
  "function_name": "lastVisitedIntegers",
  "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n    res = []\n    a = []\n    k = 0\n    for word in words:\n        if word == 'prev':\n            k += 1\n            n = len(a)\n            if n >= k:\n                res.append(a[n-k])\n            else:\n                res.append(-1)\n        else:\n            a.append(int(word))\n            k = 0\n    return res",
  "input": "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev'])",
  "output": "[2, 1, -1]",
  "numsteps": 673,
  "problem_id": [
    120,
    4,
    0
  ],
  "contest_id": "biweekly-contest-115",
  "contest_date": "2023-10-14",
  "difficulty": "easy"
}
{
  "question_id": 3164,
  "id": "sample_436",
  "function_name": "lastVisitedIntegers",
  "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n    num = []\n    cnt = 0\n    ans = []\n    for word in words:\n        if word == \"prev\":\n            cnt += 1\n            if cnt <= len(num):\n                ans.append(num[- cnt])\n            else:\n                ans.append(-1)\n        else:\n            cnt = 0\n            num.append(int(word))\n    return ans",
  "input": "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev'])",
  "output": "[2, 1, -1]",
  "numsteps": 662,
  "problem_id": [
    120,
    13,
    0
  ],
  "contest_id": "biweekly-contest-115",
  "contest_date": "2023-10-14",
  "difficulty": "easy"
}
{
  "question_id": 3164,
  "id": "sample_437",
  "function_name": "lastVisitedIntegers",
  "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n    ans = []\n    stk = []\n    i = 0\n    for x in words:\n        if x == 'prev':\n            i += 1\n            if i > len(stk):\n                ans.append(-1)\n            else:\n                ans.append(stk[-i])\n        else:\n            stk.append(int(x))\n            i = 0\n    return ans",
  "input": "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev'])",
  "output": "[2, 1, -1]",
  "numsteps": 661,
  "problem_id": [
    120,
    18,
    0
  ],
  "contest_id": "biweekly-contest-115",
  "contest_date": "2023-10-14",
  "difficulty": "easy"
}
{
  "question_id": 3164,
  "id": "sample_438",
  "function_name": "lastVisitedIntegers",
  "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n\n    current = []\n    reached = -1\n    visited = []\n\n    for x in words:\n        if x != \"prev\":\n            current.append(int(x))\n            reached = len(current) - 1\n        elif reached >= 0:\n            visited.append(current[reached])\n            reached -= 1\n        else:\n            visited.append(-1)\n\n    return visited",
  "input": "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', 'prev'])",
  "output": "[1, 2, 1]",
  "numsteps": 662,
  "problem_id": [
    120,
    21,
    1
  ],
  "contest_id": "biweekly-contest-115",
  "contest_date": "2023-10-14",
  "difficulty": "easy"
}
{
  "question_id": 3164,
  "id": "sample_439",
  "function_name": "lastVisitedIntegers",
  "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n    ans = []\n    nums = []\n    r = 0\n    for x in words:\n        if x[0] == 'p':\n            r -= 1\n            ans.append(-1 if abs(r) > len(nums) else nums[len(nums)+r])\n        else:\n            nums.append(int(x))\n            r = 0\n            \n    return ans",
  "input": "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev'])",
  "output": "[2, 1, -1]",
  "numsteps": 680,
  "problem_id": [
    120,
    11,
    0
  ],
  "contest_id": "biweekly-contest-115",
  "contest_date": "2023-10-14",
  "difficulty": "easy"
}
{
  "question_id": 3164,
  "id": "sample_440",
  "function_name": "lastVisitedIntegers",
  "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n    ans = []\n    stk = []\n    c = 0\n    for w in words:\n        if w == \"prev\":\n            c += 1\n            if len(stk) < c:\n                ans.append(-1)\n            else:\n                ans.append(stk[-c])\n        else:\n            stk.append(int(w))\n            c = 0\n    return ans",
  "input": "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev'])",
  "output": "[2, 1, -1]",
  "numsteps": 661,
  "problem_id": [
    120,
    3,
    0
  ],
  "contest_id": "biweekly-contest-115",
  "contest_date": "2023-10-14",
  "difficulty": "easy"
}
{
  "question_id": 3091,
  "id": "sample_441",
  "function_name": "countSubMultisets",
  "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r+1)\n    record[0] = 1\n    count = collections.Counter(nums)\n\n\n    for i in count:\n\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1,count[i]+1):\n                tmp[i*k:] += record[:-i*k]\n        else:\n            tmp *= (count[i] + 1)\n\n        record = tmp\n        \n        record %= int(1e9+7)\n\n\n\n    return int(numpy.sum(record[l:r+1]) % int (1e9+7))",
  "input": "countSubMultisets(nums = [1, 2, 2, 3], l = 6, r = 6)",
  "output": "1",
  "numsteps": 966,
  "problem_id": [
    121,
    11,
    0
  ],
  "contest_id": "biweekly-contest-115",
  "contest_date": "2023-10-14",
  "difficulty": "hard"
}
{
  "question_id": 3163,
  "id": "sample_442",
  "function_name": "sumCounts",
  "code": "def sumCounts(nums: List[int]) -> int:\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        curr = set()\n        for j in range(i, n):\n            curr.add(nums[j])\n            k = len(curr)\n            ans += k * k\n    return ans",
  "input": "sumCounts(nums = [1, 1])",
  "output": "3",
  "numsteps": 619,
  "problem_id": [
    122,
    11,
    1
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "easy"
}
{
  "question_id": 3163,
  "id": "sample_443",
  "function_name": "sumCounts",
  "code": "def sumCounts(nums: List[int]) -> int:\n    counts = []\n    for i in range(len(nums)):\n        hset = set()\n        for j in range(i, len(nums)):\n            hset.add(nums[j])\n            counts.append(len(hset))\n    ans = 0\n    for n in counts:\n        ans += n * n\n    return ans",
  "input": "sumCounts(nums = [1, 1])",
  "output": "3",
  "numsteps": 648,
  "problem_id": [
    122,
    26,
    1
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "easy"
}
{
  "question_id": 3163,
  "id": "sample_444",
  "function_name": "sumCounts",
  "code": "def sumCounts(nums: List[int]) -> int:\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            s = len(set(nums[i:j]))\n            ans += s * s\n    return ans",
  "input": "sumCounts(nums = [1, 1])",
  "output": "3",
  "numsteps": 613,
  "problem_id": [
    122,
    19,
    1
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "easy"
}
{
  "question_id": 3163,
  "id": "sample_445",
  "function_name": "sumCounts",
  "code": "def sumCounts(nums: List[int]) -> int:\n    ans=0\n    n=len(nums)\n    for i in range(n):\n        s=defaultdict(int)\n        for j in range(i,n):\n            s[nums[j]]+=1\n            ans+=len(s)*len(s)\n    return ans",
  "input": "sumCounts(nums = [1, 1])",
  "output": "3",
  "numsteps": 627,
  "problem_id": [
    122,
    5,
    1
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "easy"
}
{
  "question_id": 3163,
  "id": "sample_446",
  "function_name": "sumCounts",
  "code": "def sumCounts(nums: List[int]) -> int:\n    ans = 0\n    for i in range(len(nums)):\n        seen = set()\n        for j in range(i, len(nums)):\n            seen.add(nums[j])\n            ans += len(seen) * len(seen)\n    return ans",
  "input": "sumCounts(nums = [1, 1])",
  "output": "3",
  "numsteps": 617,
  "problem_id": [
    122,
    17,
    1
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "easy"
}
{
  "question_id": 3163,
  "id": "sample_447",
  "function_name": "sumCounts",
  "code": "def sumCounts(nums: List[int]) -> int:\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            l = len(set(nums[i:j + 1]))\n            ans += l * l\n    return ans",
  "input": "sumCounts(nums = [1, 1])",
  "output": "3",
  "numsteps": 633,
  "problem_id": [
    122,
    3,
    1
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "easy"
}
{
  "question_id": 3174,
  "id": "sample_448",
  "function_name": "minChanges",
  "code": "def minChanges(s: str) -> int:\n    \n    # for each 2 char, if not equal one needs to be changed\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i+1]:\n            ans += 1\n        i += 2\n    return ans",
  "input": "minChanges(s = '10')",
  "output": "1",
  "numsteps": 527,
  "problem_id": [
    123,
    20,
    1
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3174,
  "id": "sample_449",
  "function_name": "minChanges",
  "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0,len(s),2):\n        if s[i]!=s[i+1]:ans+=1\n    return ans",
  "input": "minChanges(s = '0000')",
  "output": "0",
  "numsteps": 527,
  "problem_id": [
    123,
    15,
    2
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3174,
  "id": "sample_450",
  "function_name": "minChanges",
  "code": "def minChanges(s: str) -> int:\n    c=1\n    ans=0\n    for i in range(1,len(s)):\n        if s[i]==s[i-1]:\n            c+=1\n        else:\n            if c%2==1:\n                ans+=1\n                c+=1\n            else:\n                c=1\n    return ans",
  "input": "minChanges(s = '1001')",
  "output": "2",
  "numsteps": 585,
  "problem_id": [
    123,
    5,
    0
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3174,
  "id": "sample_451",
  "function_name": "minChanges",
  "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i+1]:\n            res += 1\n    return res",
  "input": "minChanges(s = '1001')",
  "output": "2",
  "numsteps": 539,
  "problem_id": [
    123,
    23,
    0
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3174,
  "id": "sample_452",
  "function_name": "minChanges",
  "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result",
  "input": "minChanges(s = '1001')",
  "output": "2",
  "numsteps": 542,
  "problem_id": [
    123,
    11,
    0
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3174,
  "id": "sample_453",
  "function_name": "minChanges",
  "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans",
  "input": "minChanges(s = '10')",
  "output": "1",
  "numsteps": 519,
  "problem_id": [
    123,
    16,
    1
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3106,
  "id": "sample_454",
  "function_name": "lengthOfLongestSubsequence",
  "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda : 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda : 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1",
  "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)",
  "output": "-1",
  "numsteps": 817,
  "problem_id": [
    124,
    8,
    2
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3106,
  "id": "sample_455",
  "function_name": "lengthOfLongestSubsequence",
  "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i+x] = max(dp[i+x], 1 + dp[i])\n    return dp[-1] - 1",
  "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)",
  "output": "-1",
  "numsteps": 718,
  "problem_id": [
    124,
    18,
    2
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3106,
  "id": "sample_456",
  "function_name": "lengthOfLongestSubsequence",
  "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0]*(target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    \n    return dp[-1] if dp[-1] else -1",
  "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)",
  "output": "-1",
  "numsteps": 706,
  "problem_id": [
    124,
    13,
    2
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3106,
  "id": "sample_457",
  "function_name": "lengthOfLongestSubsequence",
  "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(\n                    max_len[new_sum],\n                    max_len[new_sum - x] + 1\n                )\n    return max_len[target]",
  "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)",
  "output": "-1",
  "numsteps": 731,
  "problem_id": [
    124,
    11,
    2
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3106,
  "id": "sample_458",
  "function_name": "lengthOfLongestSubsequence",
  "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d=[0]*(target+1)\n    t=[el for el in nums if el<=target]\n    if len(t)==0:\n        return -1\n    d[t[0]]=1\n    for el in t[1:]:\n        for j in range(target,0,-1):\n            if j-el>=0 and (j-el==0 or d[j-el]>0):\n                d[j]=max(d[j],d[j-el]+1)\n    if d[target]==0:\n        return -1\n    return d[target]",
  "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)",
  "output": "-1",
  "numsteps": 710,
  "problem_id": [
    124,
    14,
    2
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3106,
  "id": "sample_459",
  "function_name": "lengthOfLongestSubsequence",
  "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp=[-1]*(target+1)\n    dp[0]=0\n    for a in nums:\n        for i in range(target-a,-1,-1):\n            if dp[i]==-1:continue\n            dp[i+a]=max(dp[i+a],dp[i]+1)\n    return dp[-1]",
  "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)",
  "output": "-1",
  "numsteps": 714,
  "problem_id": [
    124,
    19,
    2
  ],
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28",
  "difficulty": "medium"
}
{
  "question_id": 3199,
  "id": "sample_460",
  "function_name": "distributeCandies",
  "code": "def distributeCandies(n: int, limit: int) -> int:\n  c = 0\n  for i in range(limit + 1):\n    for j in range(limit + 1):\n      for k in range(limit + 1):\n        if i + j + k == n:\n          c += 1\n  return c",
  "input": "distributeCandies(n = 5, limit = 2)",
  "output": "3",
  "numsteps": 985,
  "problem_id": [
    125,
    13,
    0
  ],
  "contest_id": "biweekly-contest-117",
  "contest_date": "2023-11-11",
  "difficulty": "easy"
}
{
  "question_id": 3199,
  "id": "sample_461",
  "function_name": "distributeCandies",
  "code": "def distributeCandies(n: int, limit: int) -> int:\n    res = comb(n + 2, 2)\n    if n >= limit + 1:\n        res -= 3 * comb(n - limit + 1, 2)\n    if n >= 2 * limit + 2:\n        res += 3 * comb(n - 2 * limit, 2)\n    if n >= 3 * (limit + 1):\n        res -= comb(n - 3 * limit - 1, 2)\n    return res",
  "input": "distributeCandies(n = 3, limit = 3)",
  "output": "10",
  "numsteps": 521,
  "problem_id": [
    125,
    7,
    1
  ],
  "contest_id": "biweekly-contest-117",
  "contest_date": "2023-11-11",
  "difficulty": "easy"
}
{
  "question_id": 3199,
  "id": "sample_462",
  "function_name": "distributeCandies",
  "code": "def distributeCandies(n: int, limit: int) -> int:\n    answer = 0\n    for c3 in range(limit + 1):\n        c1_min = max(0, n - c3 - limit)\n        c1_max = min(limit, n - c3)\n        \n        # print(c3, c1_min, c1_max)\n        \n        answer += max(c1_max - c1_min + 1, 0)\n        \n    return answer",
  "input": "distributeCandies(n = 3, limit = 3)",
  "output": "10",
  "numsteps": 635,
  "problem_id": [
    125,
    2,
    1
  ],
  "contest_id": "biweekly-contest-117",
  "contest_date": "2023-11-11",
  "difficulty": "easy"
}
{
  "question_id": 3199,
  "id": "sample_463",
  "function_name": "distributeCandies",
  "code": "def distributeCandies(n: int, limit: int) -> int:\n    limit = min(limit, n)\n    ans = 0\n    for i in range(limit+1):\n        if n-i > limit * 2:\n            continue\n        ans += (min(limit, n-i) - max(0, n-i-limit) + 1)\n    return ans",
  "input": "distributeCandies(n = 5, limit = 2)",
  "output": "3",
  "numsteps": 587,
  "problem_id": [
    125,
    0,
    0
  ],
  "contest_id": "biweekly-contest-117",
  "contest_date": "2023-11-11",
  "difficulty": "easy"
}
{
  "question_id": 3199,
  "id": "sample_464",
  "function_name": "distributeCandies",
  "code": "def distributeCandies(n: int, limit: int) -> int:\n    answer = 0 \n    for i in range(limit+1):\n        for j in range(limit+1):\n            k = n-i-j\n            if 0 <= k <= limit:\n                answer+=1\n    return answer",
  "input": "distributeCandies(n = 3, limit = 3)",
  "output": "10",
  "numsteps": 931,
  "problem_id": [
    125,
    8,
    1
  ],
  "contest_id": "biweekly-contest-117",
  "contest_date": "2023-11-11",
  "difficulty": "easy"
}
{
  "question_id": 3199,
  "id": "sample_465",
  "function_name": "distributeCandies",
  "code": "def distributeCandies(n: int, limit: int) -> int:\n    ans = 0\n    for a in range(limit+1):\n        for b in range(limit+1):\n            for c in range(limit+1):\n                if a+b+c == n: ans += 1\n    return ans",
  "input": "distributeCandies(n = 5, limit = 2)",
  "output": "3",
  "numsteps": 982,
  "problem_id": [
    125,
    5,
    0
  ],
  "contest_id": "biweekly-contest-117",
  "contest_date": "2023-11-11",
  "difficulty": "easy"
}
{
  "question_id": 3194,
  "id": "sample_466",
  "function_name": "findWordsContaining",
  "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    RES = []\n    for i, el in enumerate(words):\n        if x in el:\n            RES.append(i)\n    return RES",
  "input": "findWordsContaining(words = ['abc', 'bcd', 'aaaa', 'cbc'], x = 'a')",
  "output": "[0, 2]",
  "numsteps": 585,
  "problem_id": [
    127,
    40,
    1
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "easy"
}
{
  "question_id": 3194,
  "id": "sample_467",
  "function_name": "findWordsContaining",
  "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    \n    l = []\n    for i in range(len(words)):\n        if x in words[i]:\n            l.append(i)\n    \n    return l",
  "input": "findWordsContaining(words = ['leet', 'code'], x = 'e')",
  "output": "[0, 1]",
  "numsteps": 567,
  "problem_id": [
    127,
    45,
    0
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "easy"
}
{
  "question_id": 3194,
  "id": "sample_468",
  "function_name": "findWordsContaining",
  "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    res = []\n    for i, w in enumerate(words):\n        if x in w:\n            res.append(i)\n    return res",
  "input": "findWordsContaining(words = ['leet', 'code'], x = 'e')",
  "output": "[0, 1]",
  "numsteps": 565,
  "problem_id": [
    127,
    56,
    0
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "easy"
}
{
  "question_id": 3194,
  "id": "sample_469",
  "function_name": "findWordsContaining",
  "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    res = []\n    for i in range(len(words)):\n        try:\n            b = words[i].find(x)\n            if (b >= 0):\n                res.append(i)\n        except:\n            pass\n    return res",
  "input": "findWordsContaining(words = ['abc', 'bcd', 'aaaa', 'cbc'], x = 'a')",
  "output": "[0, 2]",
  "numsteps": 625,
  "problem_id": [
    127,
    33,
    1
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "easy"
}
{
  "question_id": 3194,
  "id": "sample_470",
  "function_name": "findWordsContaining",
  "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    res = []\n    for i, w in enumerate(words):\n        if x in w:\n            res.append(i)\n    return res",
  "input": "findWordsContaining(words = ['abc', 'bcd', 'aaaa', 'cbc'], x = 'z')",
  "output": "[]",
  "numsteps": 569,
  "problem_id": [
    127,
    6,
    2
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "easy"
}
{
  "question_id": 3194,
  "id": "sample_471",
  "function_name": "findWordsContaining",
  "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    return [i for i, w in enumerate(words) if x in w]",
  "input": "findWordsContaining(words = ['abc', 'bcd', 'aaaa', 'cbc'], x = 'a')",
  "output": "[0, 2]",
  "numsteps": 580,
  "problem_id": [
    127,
    44,
    1
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "easy"
}
{
  "question_id": 3209,
  "id": "sample_472",
  "function_name": "minimumCoins",
  "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n: return 0\n    elif n == 1: return prices[0]\n    dp = [float(\"inf\")] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    #print(dp)\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n        #print(dp)\n    return dp[-1]",
  "input": "minimumCoins(prices = [1, 10, 1, 1])",
  "output": "2",
  "numsteps": 732,
  "problem_id": [
    128,
    35,
    1
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3209,
  "id": "sample_473",
  "function_name": "minimumCoins",
  "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)",
  "input": "minimumCoins(prices = [3, 1, 2])",
  "output": "4",
  "numsteps": 963,
  "problem_id": [
    128,
    49,
    0
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3209,
  "id": "sample_474",
  "function_name": "minimumCoins",
  "code": "def minimumCoins(prices: List[int]) -> int:\n    \n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        \n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        \n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n            \n        return res\n        \n    dfs.cache_clear()\n    return dfs(0, -1)",
  "input": "minimumCoins(prices = [3, 1, 2])",
  "output": "4",
  "numsteps": 919,
  "problem_id": [
    128,
    6,
    0
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3209,
  "id": "sample_475",
  "function_name": "minimumCoins",
  "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    \n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        \n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n            \n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        \n        return min(c1, c2)\n    \n    return panda(0, 0)",
  "input": "minimumCoins(prices = [3, 1, 2])",
  "output": "4",
  "numsteps": 934,
  "problem_id": [
    128,
    21,
    0
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3209,
  "id": "sample_476",
  "function_name": "minimumCoins",
  "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float(\"inf\")]*(n+1)\n    \n    for i in range(n):\n        if i==0:\n            cost = prices[i]\n        else:\n            cost = ans[i-1]+prices[i]\n            \n        for j in range(i,min(n,i+i+1+1)):\n            ans[j] = min(ans[j],cost)\n    # print(ans)\n    return ans[n-1]",
  "input": "minimumCoins(prices = [1, 10, 1, 1])",
  "output": "2",
  "numsteps": 779,
  "problem_id": [
    128,
    38,
    1
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3209,
  "id": "sample_477",
  "function_name": "minimumCoins",
  "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    # @cache\n    # def dp(i):\n    #     if i == n:\n    #         return 0\n    #     prices[i] + dp(min(2 * i + 2, n))\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min(dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1))\n    return dp[0]",
  "input": "minimumCoins(prices = [3, 1, 2])",
  "output": "4",
  "numsteps": 716,
  "problem_id": [
    128,
    37,
    0
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "medium"
}
{
  "question_id": 3211,
  "id": "sample_478",
  "function_name": "findMaximumLength",
  "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums+=[float('inf')]\n    presum=[0]+list(accumulate(nums))\n\n    n, dp, prev, cur = len(nums)-1, Counter(), Counter(),0\n\n    for i in range(n):\n        i+=1\n        cur=max(cur,prev[i])\n        dp[i]=(i-cur-1) + dp[cur]\n        idx=bisect.bisect_left(presum,2*presum[i]-presum[cur])   \n        prev[idx]=i\n    return n-dp[n]",
  "input": "findMaximumLength(nums = [5, 2, 2])",
  "output": "1",
  "numsteps": 792,
  "problem_id": [
    129,
    0,
    0
  ],
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25",
  "difficulty": "hard"
}
