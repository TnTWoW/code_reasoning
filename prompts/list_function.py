example_prompt = """Input: {input}
Output: {output}"""


io_prompt = """Generate an output corresponding to the given input. Each output is generated by applying the same function to the respective inputs.

{examples}
Input: {test_input}
Output:"""


io_prompt_with_format = """Generate an output corresponding to the given input. Each output is generated by applying the same function to the respective inputs.

{examples}

Your input:
Input: {test_input}

Please format your output as follows:

Output: <Your output>"""


rule_prompt = """Generate a rule that maps the following inputs to their corresponding outputs.

{examples}

Please format your rule as follows:

Rule: <Your rule>"""

structured_rule_prompt = """Each input is a list of integers. The output is also a list of integers. Generate a rule 
that maps the following inputs to their corresponding outputs step by step.

{examples}

Please format your rule as follows:

Rule: <Your rule>"""


noisy_rule_prompt = """Generate a rule that maps the following inputs to their corresponding outputs. Note that some 
examples may be noisy, and you should take this into account when proposing the rule.

{examples}

Please format your rule as follows:

Rule: <Your rule>"""


python_rule_prompt = """Generate a Python function `fn` that maps the following inputs to their corresponding outputs.

{examples}

Please format your Python function as follows:

```python
def fn(x):
    # Your code here
```"""


rule_to_python_prompt = """You are an expert Python programmer. Write a Python function `fn` for the following rule. 
The input is a list of integers. The output is also a list of integers.

Rule: {rule}"""


feedback_prompt = """Input: {input}
Expected output: {target}
Actual output: {output}"""


rule_with_feedback_prompt = """Your rule: {rule}

This rule does not work for the following examples.

{feedback}

Generate a new rule that maps the given inputs to their corresponding outputs. Please format your rule as follows:

Rule: <Your rule>"""


nosiy_rule_with_feedback_prompt = """Your rule: {rule}

This rule does not work for the following examples.

{feedback}

Generate a new rule that maps the given inputs to their corresponding outputs. Note that some examples may be noisy, and you should take this into account when proposing the rule. Please format your rule as follows:

Rule: <Your rule>"""


rule_to_output_prompt = """Generate an output corresponding to the given input based on the rule. The input is a list of integers. The output is also a list of integers.

Rule: {rule}

Input: {test_input}
Output:"""


rule_to_output_prompt_with_format = """Generate an output corresponding to the given input based on the rule. The input is a list of integers. The output is also a list of integers.

Rule: {rule}

Your input:
Input: {test_input}

Please format your output as follows:

Output: <Your output>"""


# llama_python_rule_prompt = """Generate a Python function that maps the following inputs to their corresponding outputs.
#
# {examples}
#
# """

llama_python_rule_prompt = """Generate a Python function `fn` that maps the following inputs to their corresponding outputs.

{examples}

Please format your Python function as follows:

```python
def fn(x):
    # Your code here
```
"""

llama_rule_with_feedback_prompt = """Above program
```python
{rule}
``` does not work for the following examples.

{feedback}

Generate a new program that maps the given inputs to their corresponding outputs:

```python
def fn(x):
    # Your code here
```
`"""

coc_prompt = """Task description: Map the given input list to their corresponding output list.

Q:
Input: [1, 9, 0, 5, 3, 6, 2, 7]
Output: [0, 0, 0, 5, 3, 6, 2, 7]

A:
# CODE START
input_list = [1, 9, 0, 5, 3, 6, 2, 7]
output_list = input_list
num = input_list[2]
output_list[0], output_list[1] = num, num
# CODE END
# TRACE START
state: {{}}
line: input_list = [1, 9, 0, 5, 3, 6, 2, 7]
explanation: Python execution.
delta state: {{'input_list': [1, 9, 0, 5, 3, 6, 2, 7]}}
line: output_list = input_list
explanation: Python execution.
delta state: {{'input_list': [1, 9, 0, 5, 3, 6, 2, 7], 'output_list': [1, 9, 0, 5, 3, 6, 2, 7]}}
line: num = input_list[2]
explanation: Python execution.
delta state: {{'input_list': [1, 9, 0, 5, 3, 6, 2, 7], 'output_list': [1, 9, 0, 5, 3, 6, 2, 7], 'num': 0}}
line: output_list[0], output_list[1] = num, num
explanation: Python execution.
delta state: {{'input_list': [0 ,0, 0, 5, 3, 6, 2, 7], 'output_list': [0, 0, 0, 5, 3, 6, 2, 7], 'num': 0}}
# TRACE END
'''python
def fn(x):
    input_list = x
    output_list = input_list
    num = input_list[2]
    output_list[0], output_list[1] = num, num
    return output_list
'''

Q:
Input: [3, 7, 1, 2, 6, 9, 0, 4, 8, 5]
Output: [3, 7, 1, 2, 6, 9, 0, 4, 8, 5, 7, 3, 8, 4, 3]

A: # CODE START
input_list = [3, 7, 1, 2, 6, 9, 0, 4, 8, 5]
output_list = input_list + [7, 3, 8, 4, 3]
# CODE END
# TRACE START
state: {{}}
line: input_list = [3, 7, 1, 2, 6, 9, 0, 4, 8, 5]
explanation: Python execution.
delta state: {{'input_list': [3, 7, 1, 2, 6, 9, 0, 4, 8, 5]}}
line: output_list = input_list + [7, 3, 8, 4, 3]
explanation: Python execution.
delta state: {{'input_list': [3, 7, 1, 2, 6, 9, 0, 4, 8, 5], 'output_list': [3, 7, 1, 2, 6, 9, 0, 4, 8, 5, 7, 3, 8, 4, 3]}}
# TRACE END
'''python
def fn(x):
    input_list = x
    output_list = input_list + [7, 3, 8, 4, 3]
    return output_list
'''

Q:
{examples}
A:
"""